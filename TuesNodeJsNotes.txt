Node.js notes:

debug tools:

node inspactor / eclipse

node --debug runs debug mode

node foo.js --debug passes it to the script

Sends signal to flip node into debug mode:

kill -s USR1 PID


// express MVC framewkr
// verb oriented

var app = require('express').createServer();

app.get( '/', function ( req, res ) {
	res.send( 'hello world' );
})

app.listen ( 3000 );

Templating

- haml
- tj
- 


NODE ARCHITECTURES:
Key Points:
- javascript
- event driven

* user work which isn't user-facing out of main event loop
* using cluster you can listen to the same port multiple time
- might be cool for hoxy


// clustering

var cluster = require ('cluster');
var http = require('http');

Node Proxies:
* node-proxy
* squid
* varnish
* haproxy
* apache (something)

performance:

unbundle SSL
stud, stunnel, etc


Sharding:

Disclaimer:
Sharding is hard, See CAP

Transports:

- Websockets
- Adobe flash socket
- ajax long polling
- forever iframe
- jsonp polling

Redis:

Using RedisStore with SocketIO

RedisStore
require('socket.io')


// proper way to handle an error
var http = require ('http');

var req = http.request ({
	host: 'www.google.com;,
	path: '/',
	port: 80,
	method: 'POST'
}, function (resonse) { 
	do stuff with response
});


req.on('error', function (err) {
 // safely handle the error
});

// fail safe error catch
process.on ('uncaughtException', function (err) {
	console.dir(err);
});

// once()
// do something then tell me
once() is awesome

// Process monitoring
* Upstart (can do a bunch of stuff with cluster) (is event loop being responsive?)
* forever (can be included as a module)

// NPM Packing 
LICENSE README dnsserver.js package.json 

sudo npm install . -g

sudo npm link

"modules is how you seperate things in node"
- functionaly split code
- maintaining a bunch of stuff
- chained dependencies

npm adduser

// incredibly thourough
npm help (spend the time to get to know npm, it is highly regarded)



